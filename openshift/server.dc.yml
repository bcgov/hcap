kind: Template
apiVersion: v1
labels:
  app: ${APP_NAME}
parameters:
  - name: APP_NAME
    description: App name that OpenShift objects will be prefixed with
    required: true
  - name: IMAGE_NAMESPACE
    description: Namespace from which to pull the image
    required: true
  - name: IMAGE_TAG
    description: Image tag from image stream
    value: latest
    required: true
  - name: SERVER_PORT
    description: Port the server will be exposed on
    value: "8080"
    required: true
objects:
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APP_NAME}-server
    spec:
      host: ""
      port:
        targetPort: web
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name: ${APP_NAME}-server
        weight: 100
      wildcardPolicy: None
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-server
    spec:
      strategy:
        type: Rolling
        activeDeadlineSeconds: 21600
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APP_NAME}-server
            from:
              kind: ImageStreamTag
              name: ${APP_NAME}-server:${IMAGE_TAG}
              namespace: ${IMAGE_NAMESPACE}
          type: ImageChange
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${APP_NAME}-server
      template:
        metadata:
          name: ${APP_NAME}-server
          labels:
            name: ${APP_NAME}-server
        spec:
          containers:
            - env:
                - name: POSTGRES_HOST
                  value: ${APP_NAME}-patroni
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      key: db-name
                      name: ${APP_NAME}-patroni
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      key: db-username
                      name: ${APP_NAME}-patroni
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: db-password
                      name: ${APP_NAME}-patroni
                - name: KEYCLOAK_REALM
                  valueFrom:
                    secretKeyRef:
                      key: realm
                      name: ${APP_NAME}-keycloak
                - name: KEYCLOAK_AUTH_URL
                  valueFrom:
                    secretKeyRef:
                      key: auth-url
                      name: ${APP_NAME}-keycloak
                - name: KEYCLOAK_FE_CLIENTID
                  valueFrom:
                    secretKeyRef:
                      key: fe-client-id
                      name: ${APP_NAME}-keycloak
                - name: KEYCLOAK_API_CLIENTID
                  valueFrom:
                    secretKeyRef:
                      key: be-client-id
                      name: ${APP_NAME}-keycloak
                - name: KEYCLOAK_API_SECRET
                  valueFrom:
                    secretKeyRef:
                      key: api-secret
                      name: ${APP_NAME}-keycloak
                - name: MONGO_HOST
                  value: ${APP_NAME}-mongodb
                - name: MONGO_PORT
                  value: "27017"
                - name: MONGO_DB
                  valueFrom:
                    secretKeyRef:
                      key: database
                      name: ${APP_NAME}-mongodb
                - name: MONGO_USER
                  valueFrom:
                    secretKeyRef:
                      key: username
                      name: ${APP_NAME}-mongodb
                - name: MONGO_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: password
                      name: ${APP_NAME}-mongodb
                - name: MONGO_REPLICA
                  value: rs0
              name: ${APP_NAME}-server
              image: docker-registry.default.svc:5000/${IMAGE_NAMESPACE}/${APP_NAME}-server:${IMAGE_TAG}
              ports:
                - containerPort: "${{SERVER_PORT}}"
                  protocol: TCP
              resources:
                limits:
                  cpu: 500m
                  memory: 2Gi
                requests:
                  cpu: 100m
                  memory: 512Mi
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          dnsPolicy: ClusterFirst
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-server
    spec:
      ports:
        - name: web
          protocol: TCP
          port: ${{SERVER_PORT}}
          targetPort: ${{SERVER_PORT}}
      selector:
        name: ${APP_NAME}-server
      type: ClusterIP
      sessionAffinity: None
