# Promotion to test env.
# Trigger with tag push
# Connected with repo environment 'prod'
# TODO: Create more automated and user friendly workflow
name: OpenShift Deploy/Promotion to Production

on:
  push:
    tags:
      - prod

env:
  CLUSTER: https://api.silver.devops.gov.bc.ca:6443
  AUTH_TOKEN: ${{ secrets.AUTH_TOKEN_OCP4 }}
  PROJECT: hcap

jobs:
  promoteProd:
    name: OpenShift Promotion
    runs-on: ubuntu-latest
    concurrency: ci-promote-prod
    timeout-minutes: 6
    environment:
      name: prod
    env:
      OS_NAMESPACE_SUFFIX: prod
      SA_TOKEN: ${{ secrets.SA_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checking Deployment Config changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            src:
              - 'openshift/**'
          base: 'refs/tags/prod'
      - name: Login to prod namespace
        if: ${{ env.SA_TOKEN }}
        run: |
          oc login --token="$SA_TOKEN" --server="$CLUSTER"
      - name: Test and Deploy
        if: steps.changes.outputs.src == 'true'
        run: |
          cd "$GITHUB_WORKSPACE"
          make server-config-test
          make server-config

      - name: Cache OpenShift CLI
        id: cache-oc
        uses: actions/cache@v2
        with:
          path: /usr/local/bin/oc
          key: ${{ runner.os }}-oc

      - name: Install OpenShift CLI
        if: steps.cache-oc.outputs.cache-hit != 'true'
        run: |
          OC_VERSION=3.11.0
          sudo apt-get update
          sudo apt-get -y install wget
          wget --quiet -O oc.tar.gz "https://github.com/openshift/origin/releases/download/v${OC_VERSION}/openshift-origin-client-tools-v${OC_VERSION}-0cbc58b-linux-64bit.tar.gz"
          FILE=$(tar -tf oc.tar.gz | grep '/oc$')
          tar -zxf oc.tar.gz "$FILE"
          sudo mv "$FILE" /usr/local/bin/oc
          rm -rf oc.tar.gz openshift-origin-client-tools-v*

      - name: Promote
        run: |
          cd "$GITHUB_WORKSPACE"
          oc login --token="$AUTH_TOKEN" --server="$CLUSTER"
          export OS_NAMESPACE_SUFFIX=${{ env.OS_NAMESPACE_SUFFIX }}
          make server-deploy

      - name: Set Notification Title
        run: echo "SLACK_TITLE=$(git tag -l --format='%(contents:subject)' prod)" >> $GITHUB_ENV

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'Deployment Completed :rocket:'
